.flexberry-colsconfig {

  i.icon:not(.sort) {
    font-family: @iconsFontFamily;
    &.unhide::before {
      content: @unhideIcon;
    }
    &.hide::before {
      content: @hideIcon;
    }
    &.chevron.up::before {
      content: @chevronUpIcon;
    }
    &.chevron.down::before {
      content: @chevronDownIcon;
    }
  }

  .ui.tiny.button {
    background: transparent;
    padding: @colsconfigTinyButtonPadding;
    line-height: 1em;
    &:focus {
      box-shadow: none;
    }
    i.icon {
      font-size: @iconSize;
    }
  }

  .cols-config-apply,
  .cols-config-save {
    color: @colsconfigButtonColor;
    background: @colsconfigButtonBackground;
    padding-left: @colsconfigButtonHorizontalPadding;
    padding-right: @colsconfigButtonHorizontalPadding;
  }

  .large.icon,
  thead th,
  tfoot th {
    color: @colsconfigLargeIconColor;
    font-weight: 500;
  }

  .ui.table {
    border: none;
    margin: 0;

    thead th,
    tfoot th {
      background: transparent;
      padding-left: @colsconfigHorizontalPadding;
      padding-right: @colsconfigHorizontalPadding;
    }

    tfoot tr:first-child th {
      border-top: none;
    }

    tr th,
    tr td {
      border-left: none;
    }

    tr td {
      border-top: none;
      padding: @colsconfigCellPadding;

      &.disabled input {
        color: @colsconfigDisabledColor;
      }

      .sort-direction-dropdown.disabled {
        background: @inputBackground;
        border-color: @inputBorderColor;

        .dropdown.icon {
          color: @colsconfigDisabledColor;
        }

        .text {
          color: @colsconfigDisabledColor;
        }
      }
    }

    .ui.action.input:not([class*="left action"]) > .button.cols-config-save:last-child {
      border-radius: @inputBorderRadius;
      margin-left: 1em;

      &.disabled {
        color: @colsconfigDisabledButtonColor;
        background: @colsconfigDisabledButtonBackground;
      }
    }

    .ui.action.input:not([class*="left action"]) > input.setting-name-input {
      border-radius: @inputBorderRadius !important;

      &:hover {
        border-color: @inputHoverBorderColor !important;
      }

      &:focus {
        border-color: @focusedFormBorderColor !important;
      }
    }
  }
}

.flexberry-colsconfig.content tbody {
  max-height: @tbodyHeight;
  display: block;
  overflow: auto;
  overflow-y: scroll;
}

.ui.modal:not(.flexberry-sidepage) .flexberry-colsconfig.content tbody {
  max-height: @tbodyStaticHeight;
}

.flexberry-colsconfig.content tr {
  display: table;
  width: 100%;
  table-layout: fixed;
}

.ui.form .flexberry-colsconfig.content .message {
  margin-bottom: @messageMarginBottom;
  padding: @messagePadding;

  .close.icon {
    font-size: @messageFontSize;
    margin: @messageCloseIconMargin;
    top: 0;
  }

  .header {
    font-family: @fontName;
    font-size: @messageFontSize;
  }
}

.flexberry-colsconfig .fields.object-list-view-filters > .field {
  &:nth-child(2) {
    max-width: @filterMobileConditionWidth;
  }
}

.ui[class*="equal width"].form .flexberry-colsconfig .fields.object-list-view-filters > .field {
    width: @oneWide;
}

@media only screen and (max-width: @largestMobileScreen) {
  .ui[class*="equal width"].form .flexberry-colsconfig .fields.object-list-view-filters > .field {
    &:nth-child(1){
      width: @filterMobilePropWidth;
    }
    &:nth-child(3) {
      width: auto !important;
    }
    &:nth-child(2),
    &:nth-child(3) {
      order: 1;
    }
  }
}

/*  Mobile */

.flexberry-colsconfig {
  .colsconfig-prop {
    border-top: @propDividerMobile;
    padding: @propPaddingMobile;
  }

  .colsconfig-actions {
    background: @actionsBackground;
    border-radius: @defaultBorderRadius;
    .ui.button.disabled {
      background: none;
    }
  }

  .flexberry-menu i.icon.ellipsis.vertical {
    width: auto;
    &::before {
      content: @ellipsisVerticalIconMobile;
    }
  }

  .flexberry-menu i.icon.plus:before {
    content: @plusIconMobile;
  }
}

.colsconfig-actions .ui.button .icon {
  &.chevron.up::before {
    content: @chevronUpIconMobile;
  }
  &.chevron.down::before {
    content: @chevronDownIconMobile;
  }
}
